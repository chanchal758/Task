#include <iostream>

using namespace std;

const int SIZE 9;

void printBoard(int board[SIZE] [SIZE]) {


for (int row 0; row < SIZE; row++) {


for (int col=0; col< SIZE; col++) {


cout << board[row][col] << "";
 }

cout << endl;

}
}

bool isValid(int board[SIZE] [SIZE], int row, int col, int num) {


for (int x = 0; x < SIZE; x++) {



If (board[row] [x] == num || board[x][col] num)


return false;

int startRow row row% 3;


int startCol colcol % 3;

for (int i=0; i < 3; i++)


for (int j=0; j < 3; j++)




if (board[i + startRow][j + startCol] num)

return false;

return true;}


bool solveSudoku (Int board [SIZE][SIZE]) {



}

}

for (int row= 0; row < SIZE; row++) (

for (int col=0; col < SIZE; col++) {

if (board[row][col] 0) { // Empty cell

for (int num = 1; num <= 9; num++) {

if (isValid(board, row, col, num)) {

board[row][col] - num;

if (solveSudoku (board))

return true;

board[row][col] = 8;

return false;



return true;


}int main() {

Int board [SIZE][SIZE] - {


(5,3,0,0,7,0,0,0,0),
(6,0,0,1,9,5,0,0,0),
(0,9,8,0,0,0,0,6,0),
(8,0,0,0,6,0,0,0,3),
(4,0,0,8,0,3,0,0,1),
(7,0,0,0,2,0,0,0,6),
(0,6,0,0,0,0,2,8,0),
(0,0,0,4,1,9,0,0,5),
(0,0,0,0,8,0,0,7,9)


};



cout << "Original Sudoku:\n";


printBoard (board);

if (solveSudoku (board)) {

cout << "\nSolved Sudoku:\n";

printBoard (board);

} else {

cout << "\nNo solution exists.\n";

return 0;

}
